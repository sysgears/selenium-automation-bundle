package com.sysgears.seleniumbundle.core.testng.commands

import com.sysgears.seleniumbundle.core.command.AbstractCommand
import com.sysgears.seleniumbundle.core.conf.Config
import com.sysgears.seleniumbundle.core.implicitinit.annotations.ImplicitInit
import com.sysgears.seleniumbundle.core.webdriver.MobileOptions
import groovy.util.logging.Slf4j
import groovy.xml.MarkupBuilder

/**
 * The command class that provides the method for generating testng.xml with the given parameters.
 */
@Slf4j
class GenerateTestNGCommand extends AbstractCommand {

    /**
     * List of environments where the tests should run. An environment consists of a platform and a browser
     * divided by a colon. Note that "MicrosoftEdge" is the only browser written in camel case.
     */
    @ImplicitInit(pattern = "(windows|mac|linux):(chrome|firefox|safari|MicrosoftEdge)")
    private List<String> environments

    /**
     * List of mobile devices that are specified in {@link MobileOptions} to run the tests in mobile emulation mode.
     */
    @ImplicitInit(pattern = "iphone5|iphone6|iphone6plus|ipad|ipadpro|s8plus")
    private List<String> devices

    /**
     * Parameter that changes the TestNG config to run the tests in parallel if set to true.
     */
    @ImplicitInit
    private List<String> parallel

    /**
     * Name of the TestNG configuration file that will be generated by the command.
     */
    @ImplicitInit
    private List<String> configName

    /**
     * Creates an instance of GenerateTestNGCommand.
     *
     * @param arguments map with arguments of the command
     * @param conf project properties
     *
     * @throws IllegalArgumentException is thrown if a value is missing for a mandatory parameter or
     * the value does not match the validation pattern
     */
    GenerateTestNGCommand(Map<String, ?> arguments, Config conf) throws IllegalArgumentException {
        super(arguments, conf)
    }

    /**
     * Generates TestNG XML file for parallel launch.
     *
     * @throws IOException if any error occurs while file write operation
     */
    @Override
    void execute() throws IOException {

        log.info("TestNG config generation started...")

        def params = environments.collect {
            def pair = it.split(":")
            [platform: pair.first(), browser: pair.last(), device: null]
        }

        params += devices.collect {
            [platform: "linux", browser: "chrome", device: it.toLowerCase()]
        }

        def res = new StringWriter().with { sw ->
            def suiteArgs = [name: "Suite"]

            if (parallel) {
                def threadCount = params.size()
                suiteArgs << [parallel: parallel.first(), "thread-count": "$threadCount"]
            }

            new MarkupBuilder(sw).suite(suiteArgs) {

                params.each { Map<String, String> param ->
                    def testName = "${param.platform}-${param.device ?: param.browser}"

                    test(name: testName) {
                        param.entrySet().each { Map.Entry entry ->
                            if (entry.value) {
                                parameter(name: entry.key, value: entry.value)
                            }
                        }
                        packages {
                            "package"(name: "com.sysgears.seleniumbundle.tests.*")
                        }
                    }
                }
            }
            "<!DOCTYPE suite SYSTEM 'http://testng.org/testng-1.0.dtd'>\n\n" + sw.toString()
        }

        def fileName = "${configName ? configName.first() : "generatedTestNG"}.xml"
        new File("src${File.separator}test${File.separator}resources${File.separator}$fileName")
                .write(res)

        log.info("TestNG config [$fileName] generation is completed.")
    }
}
